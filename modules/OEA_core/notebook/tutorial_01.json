{
	"name": "tutorial_01",
	"properties": {
		"folder": {
			"name": "3) sandbox/archive"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark2v3",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/7b9a4896-4541-483f-bdc7-d8f4ec6be3ee/resourceGroups/rg-oea-CISD3GG1/providers/Microsoft.Synapse/workspaces/syn-oea-cisd3gg1/bigDataPools/spark2v3",
				"name": "spark2v3",
				"type": "Spark",
				"endpoint": "https://syn-oea-cisd3gg1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark2v3",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.0",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": true
					}
				},
				"source": [
					"storage_account = 'stoeacisd3gg1'\r\n",
					"stage1 = 'abfss://stage1@' + storage_account + '.dfs.core.windows.net'\r\n",
					"stage2 = 'abfss://stage2@' + storage_account + '.dfs.core.windows.net'\r\n",
					"stage3 = 'abfss://stage3@' + storage_account + '.dfs.core.windows.net'"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"#step 1 - initial ingestion (specify schema)\r\n",
					"\r\n",
					"df = spark.read.csv(stage1 + '/tutorial_01/roster/2021-06-02/Person', header='false')\r\n",
					"sqlContext.registerDataFrameAsTable(df, 'Person')\r\n",
					"sql_str = \"select _c0 Id, to_timestamp(_c1) FirstSeenDateTime, to_timestamp(_c2) LastSeenDateTime, _c3 GivenName, _c4 MiddleName, _c5 PreferredGivenName, _c6 PreferredMiddleName, _c7 PreferredSurname, _c8 Surname from Person\"\r\n",
					"df = spark.sql(sql_str)\r\n",
					"df.write.format('delta').mode('overwrite').save(stage2 + '/tutorial_01/Person')\r\n",
					"\r\n",
					"# now show the current state of the Person table\r\n",
					"df = spark.read.format(\"delta\").load(stage2 + '/tutorial_01/Person')\r\n",
					"df.show(100)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# step 2 - update table with new snapshot data\r\n",
					"\r\n",
					"# Ingest next snapshot of Person records, with the following changes:\r\n",
					"# Added 2 new students: Andrew Hudson, Amber Buchanan\r\n",
					"# Deleted 1 student: Erika Riley\r\n",
					"# Modified 1 student: Joseph Kelley was modified to be Joey Kelley\r\n",
					"df = spark.read.csv(stage1 + '/tutorial_01/roster/2021-06-10/Person', header='false')\r\n",
					"sqlContext.registerDataFrameAsTable(df, 'Person')\r\n",
					"sql_str = \"select _c0 Id, to_timestamp(_c1) FirstSeenDateTime, to_timestamp(_c2) LastSeenDateTime, _c3 GivenName, _c4 MiddleName, _c5 PreferredGivenName, _c6 PreferredMiddleName, _c7 PreferredSurname, _c8 Surname from Person\"\r\n",
					"df = spark.sql(sql_str)\r\n",
					"df.write.format('delta').mode('overwrite').save(stage2 + '/tutorial_01/Person')\r\n",
					"# now show the current state of the Person table\r\n",
					"df = spark.read.format(\"delta\").load(stage2 + '/tutorial_01/Person')\r\n",
					"df.show(30)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# step 3 - update table with delta data (upsert)\r\n",
					"# Ingest delta data consisting of a new student \"Sheldon Bergeron\", and an update to \"Shelby Berger\" (lastnamt changed to \"Bergeron\")\r\n",
					"# https://docs.delta.io/latest/api/python/index.html?highlight=whenmatchedupdateall#delta.tables.DeltaTable.merge\r\n",
					"from delta.tables import *\r\n",
					"\r\n",
					"updatesDF = spark.read.csv(stage1 + '/tutorial_01/roster/2021-06-11/Person', header='false')\r\n",
					"sqlContext.registerDataFrameAsTable(updatesDF, 'Person')\r\n",
					"sql_str = \"select _c0 Id, to_timestamp(_c1) FirstSeenDateTime, to_timestamp(_c2) LastSeenDateTime, _c3 GivenName, _c4 MiddleName, _c5 PreferredGivenName, _c6 PreferredMiddleName, _c7 PreferredSurname, _c8 Surname from Person\"\r\n",
					"updatesDF = spark.sql(sql_str)\r\n",
					"#display(updatesDF)\r\n",
					"deltaTable = DeltaTable.forPath(spark, stage2 + '/tutorial_01/Person')\r\n",
					"\r\n",
					"deltaTable.alias(\"Person\").merge(\r\n",
					"    updatesDF.alias(\"updates\"),\r\n",
					"    \"Person.Id = updates.Id\") \\\r\n",
					"  .whenMatchedUpdate(set = \r\n",
					"      {\r\n",
					"      \"FirstSeenDateTime\": \"updates.FirstSeenDateTime\",\r\n",
					"      \"LastSeenDateTime\": \"updates.LastSeenDateTime\",\r\n",
					"      \"GivenName\": \"updates.GivenName\",\r\n",
					"      \"MiddleName\": \"updates.MiddleName\",\r\n",
					"      \"PreferredGivenName\": \"updates.PreferredGivenName\",\r\n",
					"      \"PreferredMiddleName\": \"updates.PreferredMiddleName\",\r\n",
					"      \"PreferredSurname\": \"updates.PreferredSurname\",\r\n",
					"      \"Surname\": \"updates.Surname\"\r\n",
					"    } \r\n",
					"  ) \\\r\n",
					"  .whenNotMatchedInsert(values =\r\n",
					"    {\r\n",
					"      \"Id\": \"updates.Id\",\r\n",
					"      \"FirstSeenDateTime\": \"updates.FirstSeenDateTime\",\r\n",
					"      \"LastSeenDateTime\": \"updates.LastSeenDateTime\",\r\n",
					"      \"GivenName\": \"updates.GivenName\",\r\n",
					"      \"MiddleName\": \"updates.MiddleName\",\r\n",
					"      \"PreferredGivenName\": \"updates.PreferredGivenName\",\r\n",
					"      \"PreferredMiddleName\": \"updates.PreferredMiddleName\",\r\n",
					"      \"PreferredSurname\": \"updates.PreferredSurname\",\r\n",
					"      \"Surname\": \"updates.Surname\"\r\n",
					"    } \r\n",
					"  ) \\\r\n",
					"  .execute()\r\n",
					"# now show the current state of the Person table\r\n",
					"df = spark.read.format(\"delta\").load(stage2 + '/tutorial_01/Person')\r\n",
					"df.show(30)\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# now show the current state of the Person table\r\n",
					"df = spark.read.format(\"delta\").load(stage2 + '/tutorial_01/Person')\r\n",
					"df.show(50)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# step 4: describe history and time travel\r\n",
					"\r\n",
					"from delta.tables import DeltaTable\r\n",
					"deltaTable = DeltaTable.forPath(spark, stage2 + '/tutorial_01/Person')\r\n",
					"print(\"######## Describe history for the table ######\")\r\n",
					"deltaTable.history().show()\r\n",
					"\r\n",
					"print(\"######## Show an earlier version of the table ######\")\r\n",
					"df1 = spark.read.format('delta').option('versionAsOf', 1).load(stage2 + '/tutorial_01/Person')\r\n",
					"df1.show(30)"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Create spark db to use with Power BI\r\n",
					"#spark.sql(\"CREATE TABLE events USING DELTA LOCATION '\" + stage2 + \"/tutorial_01/Person'\")\r\n",
					"\r\n",
					"spark.sql('CREATE DATABASE IF NOT EXISTS tutorial_02')\r\n",
					"spark.sql(\"create table if not exists tutorial_02.Person using DELTA location '\" + stage2 + \"/tutorial_01/Person'\")"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": true
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.sql(\"SELECT * FROM tutorial_01.person\")\r\n",
					"df.show(10)"
				],
				"execution_count": 9
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Activity data\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# insert new activity data\r\n",
					"# todo: port the example below, as described here: https://docs.delta.io/0.8.0/delta-update.html#-merge-in-dedup\r\n",
					"deltaTable.alias(\"logs\").merge(\r\n",
					"    newDedupedLogs.alias(\"newDedupedLogs\"),\r\n",
					"    \"logs.uniqueId = newDedupedLogs.uniqueId\") \\\r\n",
					"  .whenNotMatchedInsertAll() \\\r\n",
					"  .execute()\r\n",
					"\r\n",
					"from delta.tables import DeltaTable\r\n",
					"deltaTable = DeltaTable.forPath(spark, dest_path)\r\n",
					"deltaTable.alias(\"TechActivity\").merge(updatesDF.alias(\"updates\"), \"TechActivity.SignalId = updates.SignalId\") \\\r\n",
					"    .whenNotMatchedInsertAll() \\\r\n",
					"    .execute()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Reset the tutorial"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Delete all data from stage2 - to reset the exercise and start over\r\n",
					"from notebookutils import mssparkutils\r\n",
					"mssparkutils.fs.rm(stage2 + '/tutorial_01', True)"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from notebookutils import mssparkutils\r\n",
					"# to get a list of all the commands available\r\n",
					"mssparkutils.fs.help()\r\n",
					""
				],
				"execution_count": 2
			}
		]
	}
}
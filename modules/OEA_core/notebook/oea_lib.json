{
	"name": "oea_lib",
	"properties": {
		"folder": {
			"name": "oea_framework"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"storage_account = 'stoeacisd3gg1'\r\n",
					"instrumentation_key = 'InstrumentationKey=5a4a6026-f008-4e9e-a48a-96a412d250d6'"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"stage1 = 'abfss://stage1@' + storage_account + '.dfs.core.windows.net'\r\n",
					"stage2 = 'abfss://stage2@' + storage_account + '.dfs.core.windows.net'\r\n",
					"stage3 = 'abfss://stage3@' + storage_account + '.dfs.core.windows.net'\r\n",
					"oea_path = 'abfss://oea-framework@' + storage_account + '.dfs.core.windows.net'\r\n",
					"\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"spark = SparkSession.builder.appName(\"OEA_Framework\").getOrCreate()"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Imports\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, DoubleType, ArrayType, TimestampType, BooleanType\r\n",
					"from delta.tables import DeltaTable\r\n",
					"from notebookutils import mssparkutils\r\n",
					"from pyspark.sql.functions import year, month, col\r\n",
					"from pyspark.sql.utils import AnalysisException, FileNotFoundException"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Setup logging"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from opencensus.ext.azure.log_exporter import AzureLogHandler, logging\r\n",
					"logger = logging.getLogger(__name__)\r\n",
					"logger.setLevel(logging.DEBUG) # https://docs.python.org/3/library/logging.html#logging-levels\r\n",
					"logger.addHandler(AzureLogHandler(connection_string=instrumentation_key))"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Function lib"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# Returns true if the path exists\r\n",
					"def path_exists(path):\r\n",
					"    tableExists = False\r\n",
					"    try:\r\n",
					"        items = mssparkutils.fs.ls(path)\r\n",
					"        tableExists = True\r\n",
					"    except Exception as e:\r\n",
					"        # This Exception comes as a generic Py4JJavaError that occurs when the path specified is not found.\r\n",
					"        pass\r\n",
					"    return tableExists\r\n",
					"\r\n",
					"def file_exists(path):\r\n",
					"    return folder_exists(path)\r\n",
					"\r\n",
					"def folder_exists(path):\r\n",
					"    return folder_exists(path)"
				],
				"execution_count": null
			}
		]
	}
}